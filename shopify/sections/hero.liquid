{{ 'section-image-banner.css' | asset_url | stylesheet_tag }}

{%- if section.settings.adapt_height_first_image and section.settings.image != blank -%}
  {%- style -%}
  @media screen and (max-width: 749px) {
    #Banner-{{ section.id }}::before,
    #Banner-{{ section.id }} .banner__media::before,
    #Banner-{{ section.id }}:not(.banner--mobile-bottom) .banner__content::before {
      padding-bottom: {{ 1 | divided_by: section.settings.image.aspect_ratio | times: 100 }}%;
      content: '';
      display: block;
    }
  }

  @media screen and (min-width: 750px) {
    #Banner-{{ section.id }}::before,
    #Banner-{{ section.id }} .banner__media::before {
      padding-bottom: {{ 1 | divided_by: section.settings.image.aspect_ratio | times: 100 }}%;
      content: '';
      display: block;
    }
  }
  {%- endstyle -%}
{%- endif -%} 

<div id="Banner-{{ section.id }}" class="hero container-fluid banner banner--content-align-{{ section.settings.desktop_content_alignment }} banner--content-align-mobile-{{ section.settings.mobile_content_alignment }} banner--{{ section.settings.image_height }}{% if section.settings.adapt_height_first_image and section.settings.image != blank %} banner--adapt{% endif %} banner--desktop-transparent">
  {%- if section.settings.video != blank -%}
    <div class="banner__media media">
      {% assign poster = section.settings.image | image_url: width: 1500 %}

      {{ section.settings.video | video_tag: poster: poster, muted: true, loop: true, autoplay: true, playsinline: true, disableRemotePlayback: true, width: 1500, class: "js-banner__video" }}
      {{ section.settings.video_mob | video_tag: poster: poster, muted: true, loop: true, autoplay: true, playsinline: true, disableRemotePlayback: true, width: 600, class: "js-banner__video-mobile" }}
    </div>

  {%- elsif section.settings.image != blank  -%}
    <div class="banner__media media{% if section.settings.image == blank %} placeholder{% endif %}">
      {%-liquid
        assign image_height = section.settings.image.width | divided_by: section.settings.image.aspect_ratio
      -%}
      {{ section.settings.image | image_url: width: 1500 | image_tag:
        loading: 'lazy',
        width: section.settings.image.width,
        height: image_height,
        class: image_class,
        sizes: sizes,
        widths: '375, 550, 750, 1100, 1500, 1780, 2000, 3000, 3840',
        alt: section.settings.image.alt | escape
      }}
    </div>
  {%- else -%}
    <div class="banner__media media{% if section.settings.image == blank %} placeholder{% endif %}">
      {{ 'lifestyle-2' | placeholder_svg_tag: 'placeholder-svg' }}
    </div>
  {%- endif -%}

  <div class="container banner__content banner__content--{{ section.settings.desktop_content_position }} page-width">
    <div class="banner__box content-container content-container--full-width-mobile">
      {%- for block in section.blocks -%}
        {%- case block.type -%}
          {%- when 'heading' -%}
            <h2 class="banner__heading font-weight-bold letter-spacing-1" {{ block.shopify_attributes }}>
              {{ block.settings.heading | escape }} <span class="banner__heading-accent">{{ block.settings.accent_text | escape }}</span>
            </h2>
          {%- when 'form' -%}
            <div class="banner__form" {{ block.shopify_attributes }}>
              <form action="/pages/search" type="POST">
                <div class="banner__field-wrapper">
                  <div class="banner__field field">
                    <input
                      id="NewsletterForm--{{ section.id }}"
                      type="text"
                      name="search"
                      class="banner__input field__input color-text-white text-20px-all"
                      value=""
                      aria-required="true"
                      autocorrect="off"
                      autocapitalize="off"
                      autocomplete="search"
                      placeholder="{{ block.settings.form_placeholder | escape }}"
                      required
                    >
                    <span class="banner__icon-search">{% render 'icon-search' %}</span>
                    
                    {% comment %}
                    <label class="banner__label field__label color-text-white text-20px font-weight-bold">
                      {{ block.settings.form_placeholder | escape }}
                    </label>
                    {% endcomment %}

                    <button type="submit" class="btn btn--primary banner__button field__button" id="SearchSubmit">
                      {% render 'icon-magic-wand' %}
                      {{ block.settings.button_text | escape }}
                    </button>
                  </div>
                </div>
              </form> 
            </div>

        {%- endcase -%}
      {%- endfor -%}
    </div>
      {%- for block in section.blocks -%}
        {%- case block.type -%}
          {%- when 'text-bottom' -%}
            <p class="banner__text-bottom text-36px color-text-white font-weight-bold" {{ block.shopify_attributes }}>
              {{ block.settings.text_bottom | escape }}
            </p>
        {%- endcase -%}
      {%- endfor -%}
  </div>

  
</div>

<script>
(function (){
  var videoBanner = document.querySelector(window.innerWidth > 600 ? '.js-banner__video' : '.js-banner__video-mobile');
  var inputBanner = document.querySelector('.hero input[name="search"]');
  
  var prompts = [
    ['family of pandas', 1500],
    ['cool metal robot', 2400],
    ['dog royal portrait'],
    ['cute cat photo'],
    ['beautiful girl as pocahontas', 3000]
  ];
  var i = 0;

  function updatePrompt() {
    var prompt = prompts[i];

    if (!prompt) return;

    var characters = prompt[0].split("");
    var delayPerChar = 500 / characters.length;
    var charIndex = 0;

    i = (i === prompts.length - 1) ? 0 : i + 1;
    inputBanner.placeholder = '';

    function charTyper() {
      inputBanner.placeholder += characters[charIndex++];

      if (charIndex === characters.length) return;

      updatePrompt.timeoutType = setTimeout(charTyper, delayPerChar);
    }

    updatePrompt.timeoutType = setTimeout(charTyper, delayPerChar);
    updatePrompt.timeoutPrompt = setTimeout(updatePrompt, prompt[1] || 2300);
    updatePrompt.stop = function () {
      clearTimeout(updatePrompt.timeoutPrompt);
      clearTimeout(updatePrompt.timeoutType);
      i = 0;
    }
  }

  if (videoBanner) {
    videoBanner.addEventListener('loadeddata', function () {
      updatePrompt();
    });
    videoBanner.addEventListener('timeupdate', function () {
      var cTime = this.currentTime;

      if (Math.ceil(cTime) === this.duration) {
        videoBanner.pause();
        videoBanner.currentTime = 0;
        updatePrompt.stop();

        setTimeout(function() {
          videoBanner.play();
          updatePrompt();
        }, 10);
      }
    });
  }

  function handleVisibilityChange() {
    if (document.visibilityState === 'visible') {
      videoBanner.play();
      updatePrompt();
    } else {
      videoBanner.pause();
      videoBanner.currentTime = 0;
      updatePrompt.stop();
    }
  }

  document.addEventListener('visibilitychange', handleVisibilityChange);
})()
</script>


{% schema %}
{
  "name": "Hero",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "image_picker",
      "id": "image",
      "label": "t:sections.image-banner.settings.image.label"
    },
    {
      "type": "video",
      "id": "video",
      "label": "Video desktop"
    },
    {
      "type": "video",
      "id": "video_mob",
      "label": "Video mobile"
    },
    {
      "type": "select",
      "id": "image_height",
      "options": [
        {
          "value": "small",
          "label": "t:sections.image-banner.settings.image_height.options__1.label"
        },
        {
          "value": "medium",
          "label": "t:sections.image-banner.settings.image_height.options__2.label"
        },
        {
          "value": "large",
          "label": "t:sections.image-banner.settings.image_height.options__3.label"
        }
      ],
      "default": "medium",
      "label": "t:sections.image-banner.settings.image_height.label",
      "info": "t:sections.image-banner.settings.image_height.info"
    },
    {
      "type": "checkbox",
      "id": "adapt_height_first_image",
      "default": false,
      "label": "t:sections.image-banner.settings.adapt_height_first_image.label",
      "info": "t:sections.image-banner.settings.adapt_height_first_image.info"
    },
    {
      "type": "select",
      "id": "desktop_content_position",
      "options": [
        {
          "value": "top-left",
          "label": "t:sections.image-banner.settings.desktop_content_position.options__1.label"
        },
        {
          "value": "top-center",
          "label": "t:sections.image-banner.settings.desktop_content_position.options__2.label"
        },
        {
          "value": "top-right",
          "label": "t:sections.image-banner.settings.desktop_content_position.options__3.label"
        },
        {
          "value": "middle-left",
          "label": "t:sections.image-banner.settings.desktop_content_position.options__4.label"
        },
        {
          "value": "middle-center",
          "label": "t:sections.image-banner.settings.desktop_content_position.options__5.label"
        },
        {
          "value": "middle-right",
          "label": "t:sections.image-banner.settings.desktop_content_position.options__6.label"
        },
        {
          "value": "bottom-left",
          "label": "t:sections.image-banner.settings.desktop_content_position.options__7.label"
        },
        {
          "value": "bottom-center",
          "label": "t:sections.image-banner.settings.desktop_content_position.options__8.label"
        },
        {
          "value": "bottom-right",
          "label": "t:sections.image-banner.settings.desktop_content_position.options__9.label"
        }
      ],
      "default": "middle-center",
      "label": "t:sections.image-banner.settings.desktop_content_position.label"
    },
    {
      "type": "select",
      "id": "desktop_content_alignment",
      "options": [
        {
          "value": "left",
          "label": "t:sections.image-banner.settings.desktop_content_alignment.options__1.label"
        },
        {
          "value": "center",
          "label": "t:sections.image-banner.settings.desktop_content_alignment.options__2.label"
        },
        {
          "value": "right",
          "label": "t:sections.image-banner.settings.desktop_content_alignment.options__3.label"
        }
      ],
      "default": "center",
      "label": "t:sections.image-banner.settings.desktop_content_alignment.label"
    },
    {
      "type": "header",
      "content": "t:sections.image-banner.settings.header.content"
    },
    {
      "type": "select",
      "id": "mobile_content_alignment",
      "options": [
        {
          "value": "left",
          "label": "t:sections.image-banner.settings.mobile_content_alignment.options__1.label"
        },
        {
          "value": "center",
          "label": "t:sections.image-banner.settings.mobile_content_alignment.options__2.label"
        },
        {
          "value": "right",
          "label": "t:sections.image-banner.settings.mobile_content_alignment.options__3.label"
        }
      ],
      "default": "center",
      "label": "t:sections.image-banner.settings.mobile_content_alignment.label"
    }
  ],
  "blocks": [
    {
      "type": "heading",
      "name": "t:sections.image-banner.blocks.heading.name",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "default": "Image banner",
          "label": "t:sections.image-banner.blocks.heading.settings.heading.label"
        },
        {
          "type": "text",
          "id": "accent_text",
          "label": "Accent text"
        }
      ]
    },
    {
      "type": "form",
      "name": "Form",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "form_placeholder",
          "default": "Placeholder",
          "label": "Form placeholder"
        },
        {
          "type": "text",
          "id": "button_text",
          "default": "Button text",
          "label": "Button text"
        }
      ]
    },
    {
      "type": "text-bottom",
      "name": "Text bottom",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "text_bottom",
          "default": "Text bottom",
          "label": "Text"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Hero"
    }
  ]
}
{% endschema %}
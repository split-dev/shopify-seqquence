/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/css/main.scss":
/*!***************************!*\
  !*** ./src/css/main.scss ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://shopify-theme-lab/./src/css/main.scss?");

/***/ }),

/***/ "./src/js/ai-generator.js":
/*!********************************!*\
  !*** ./src/js/ai-generator.js ***!
  \********************************/
/***/ (() => {

eval("// CONSTANTS\nconst LS_SEARCH_KEY = 'ai-search';\n// const API_HOST = 'https://lime-filthy-duckling.cyclic.app';\n// const S3_HOST = 'https://aipr.s3.amazonaws.com';\nconst LAMBDA_HOST = 'https://q65eekxnmbwkizo3masynrpea40rylba.lambda-url.us-east-1.on.aws'; // us-east-1 - prod\n// const LAMBDA_HOST = 'https://r4qlyqjkf4sankpkqcvzdqgm540sozvz.lambda-url.eu-central-1.on.aws'; // eu_central-1 - for testing\nconst PUSHER_ID = '19daec24304eedd7aa8a';\nconst GENERATION_COUNT = 3;\nconst REQUESTS_LIMIT = 100;\nconst querySearch = new URL(document.location).searchParams.get('search') || '';\nconst queryProductType = new URL(document.location).searchParams.get('productType') || '';\nconst preventAutoExtend = (new URL(document.location).searchParams.get('preventAutoExtend') === \"on\");\n\n// VARIABLES\nconst searchHistory = JSON.parse(localStorage.getItem(LS_SEARCH_KEY) || '{}');\nconst allPromptResults = new Map();\n\nlet allAvailablePrompts;\nlet searchResultDomCarousels = document.querySelectorAll('.js-search-view .search__wrapper');\nlet pusher;\n\n// BIND ELEMENTS CONTROLS\nconst searchForm = document.getElementById('aiSearch');\nconst searchInput = searchForm.querySelector('input[name=\"search\"]');\nconst searchViews = document.querySelectorAll('.js-search-view');\nconst productTypeLabel = document.querySelector('.product_type_label span');\n/** Buttom on the page bottom for generating new search carousels */\nconst generateNewSearchPrompt = document.querySelector('.js-get-new-prompt');\nconst searchDomTemplate = document.querySelector('.js-search-dom-template');\nconst errorMessagePopup = document.getElementById('error_message')\n\n// BIND HANDLERS\nfunction bindHanlers() {\n    document.querySelector('.search')?.addEventListener('click', handleOpenProduct);\n    generateNewSearchPrompt?.addEventListener('click', handleGenerateNewStyle);\n    searchViews?.forEach((searchView) => {\n        searchView.addEventListener('click', handleGenerateMore);\n    });\n    searchInput.addEventListener('input', () => {\n        if (searchInput.value.length === 0) {\n            searchInput.value = searchInput.placeholder;\n        }\n    })\n}\n\nfunction appendItem(parentElement, itemHtml) {\n    const tempContainer = document.createElement('div');\n\n    tempContainer.innerHTML = itemHtml;\n    parentElement.appendChild(tempContainer.firstChild);\n}\n\nfunction init() {\n    if (!searchForm || !searchViews.length) return;\n\n    searchForm.querySelector('input[name=\"search\"]').value = querySearch;\n    searchForm.querySelector('input[name=\"preventAutoExtend\"]').checked = preventAutoExtend;\n    searchForm.querySelector('input[name=\"productType\"][value=\"'+queryProductType+'\"]').checked = true;\n    productTypeLabel.innerHTML = searchForm.querySelector('input[name=\"productType\"][value=\"'+queryProductType+'\"]').closest('LABEL').innerText;\n\n    getAvailablePrompts()\n        .then(json => {\n            allAvailablePrompts = json;\n        })\n        .catch(console.error)\n\n    try {\n        pusherInit();\n    } catch (e) {\n        console.error('pusher error', e)\n    }\n\n    if (querySearch.length) {\n        // GET CACHED\n        if (searchHistory[querySearch]) {\n            const requestIds = Object.values(searchHistory[querySearch])\n                .reduce((prev, curr) => prev.concat(curr), []);\n\n            Promise.all(requestIds.map(id => waitImagesResult(id, true)))\n                .then((images) => {\n                    removeResultsBusyState();\n                    console.log('Got images from LS :>> ', ...images);\n                })\n                .catch(console.error);\n            \n        // GENERATE\n        } else {\n            setResultsUnavailableState();\n            sendPromptRequest(querySearch, false)\n                .then(images => {\n                    removeResultsBusyState();\n                    console.log('Got images from Replicate API :>> ', images);\n                })\n                .catch(console.error);\n        }\n    }\n\n    bindHanlers();\n}\n\nconst trackGoogleError = (err) => {\n    window.gtag && window.gtag('event', 'error', {\n        'event_category': 'Replicate AI ERROR',\n        'event_label': 'Images request error',\n        'value': err\n    });\n};\n\nconst addNewCarousel = () => {\n    const newSearchDom = searchDomTemplate.content.cloneNode(true);\n    const searchContainer = generateNewSearchPrompt.closest('.js-search-view');\n\n    searchDomTemplate.before(newSearchDom);\n\n    const newProductsList = searchContainer.querySelector('.search__wrapper:last-of-type .js-search-products');\n\n    return newProductsList;\n};\n\nconst updateImagesPreviews = (promptResult) => {\n    console.log('promptResult', promptResult)\n    searchResultDomCarousels = document.querySelectorAll('.js-search-view .search__wrapper');\n\n    if (promptResult.error) {\n        trackGoogleError(promptResult.error);\n    } else {\n        const ids = promptResult.images.map(img => img.id)\n        const prevResults = allPromptResults.get(promptResult.prompt)?.filter(result => {\n            return !ids.includes(result.id)\n        });\n        console.log('allPromptResults.get(result.prompt) :>> ', allPromptResults.get(promptResult.prompt), prevResults);\n        console.log('result.images :>> ', promptResult.images);\n        const imgs = [\n            ...prevResults || [],\n            ...promptResult.images,\n        ];\n        allPromptResults.set(promptResult.prompt, imgs);\n    }\n\n    const promptSearchesIterator = allPromptResults.keys();\n    const uniqueSearches = Array.from(promptSearchesIterator);\n    console.log('allPromptResults :>> ', promptSearchesIterator, uniqueSearches);\n\n    uniqueSearches.forEach((search, i) => {\n        let imgs = allPromptResults.get(search);\n\n        console.log('imgs :>> ', imgs);\n\n        imgs = imgs?.filter(img => img && img.generatedImg);\n\n        console.log('imgs', imgs)\n\n        if (!searchResultDomCarousels[i]) {\n            addNewCarousel();\n            searchResultDomCarousels = document.querySelectorAll('.js-search-view .search__wrapper');\n        }\n\n        const slider = searchResultDomCarousels[i].querySelector('.js-search-products .products-wrapper');\n        const searchPrompt = searchResultDomCarousels[i].querySelector('.js-search-prompt');\n        const generateMoreBtn = searchResultDomCarousels[i].querySelector('.js-generate-more');\n        console.log('Products slider', slider);\n        const mockupImg = slider.parentNode.getAttribute('data-mockup-src');\n\n        console.log('searchPrompt,search :>> ', searchPrompt, search);\n        searchPrompt && (searchPrompt.textContent = search);\n        generateMoreBtn && generateMoreBtn.setAttribute('data-prompt', search);\n\n        if (slider) {\n            console.log(1)\n            imgs.forEach((img, j) => {\n                const slide = slider.querySelectorAll('.products-item')[j];\n                console.log(2, img)\n                if (slide) {\n                    const redirectBtn = slide.querySelector('.js-get-product-redirect');\n                    slide.querySelector('.preview-image').style.backgroundImage = `url(${img.generatedImg})`;\n                    \n                    redirectBtn.setAttribute('data-id', `${img.id}`)\n                    redirectBtn.setAttribute('data-handle', `${img.handle || ''}`);\n                    img.handle || redirectBtn.classList.add('loading');\n                    slide.classList.add('customized');\n                } else {\n                    appendItem(slider, `<div class=\"products-item customized\">\n                        <div class=\"preview-image\" style=\"background-image: url(${img.generatedImg})\"></div>\n                        <img src=\"${mockupImg}\"/>\n                        <button data-id=\"${img.id}\" data-handle=\"${img.handle || ''}\" class=\"btn btn--secondary ${img.handle ? '' : 'loading'} js-get-product-redirect button button--secondary\"><span>${img.handle ? '$34.99 Buy Now!' : 'Wait'}</span></button>\n                    </div>`);\n                }\n\n                if (!img.handle?.length) {\n                    console.error('No product handle found');\n                    slide && setBusyBuyButtonState(slide.querySelector('.btn'), true);\n                } else {\n                    slide && setBusyBuyButtonState(slide.querySelector('.btn'), false);\n                }\n            });\n        }\n    });\n}\n\nconst checkImagesFullLoaded = (pendImagesResult, cacheRun) => {\n    console.log('checkImagesFullLoaded :>> ', pendImagesResult);\n    return pendImagesResult?.images?.length && pendImagesResult.images.every(image => {\n        if (cacheRun) {\n            console.log('cacheRun - setting not ready');\n            image.handle ||= 'not ready';\n        }\n        \n        return image.handle;\n    });\n    // return pendImagesResult.every(result => {\n    // });\n}\n\nconst timeouts = {};\nfunction resolvePusher(id, data) {\n    timeouts[id]?.resolve(data);\n    updateImagesPreviews(data);\n}\nconst waitPusher = (id, ms) => new Promise(resolve => {\n    const timeout = setTimeout(resolve, ms);\n\n    timeouts[id] = {\n        resolve(data) {\n            clearTimeout(timeout);\n            Array.isArray(data) || (data = [data])\n            resolve(data);\n        }\n    }\n});\nasync function waitImagesResult (id, cacheRun) {\n    console.time('waitImagesResult', id, cacheRun);\n\n    let imagesResponse;\n    let timeout = cacheRun ? 1 : 4000; // 3s for AI and 1s for crop\n    let loadedImages = 0;\n\n    // if (!cacheRun) {\n    //     const channel = pusher.subscribe(id);\n\n    //     channel.bind('1', function (data) {\n    //         // we can handle updates here\n    //         console.log('<< pusher >>', data);\n    //         resolvePusher(id, data)\n    //     });\n    // }\n\n    for (let retryCounter = 0; retryCounter < REQUESTS_LIMIT; retryCounter += 1) {\n        if (!cacheRun) {\n            imagesResponse = await waitPusher(id, timeout); // pusher can send data earlier to us\n            console.log('imagesResponse :>> ', imagesResponse);\n        } else {\n            cacheRun = false;\n            timeout = 500;\n        }\n        \n        if (!imagesResponse) {\n            const imagesRequest = await fetch(`${LAMBDA_HOST}/image?requestId=${id}`, {\n                method: 'GET'\n            });\n            if (imagesRequest.status !== 200) {\n                console.error(imagesRequest.status, imagesRequest.statusText);\n\n                trackGoogleError(`Error images request ${JSON.stringify([imagesRequest.status, imagesRequest.statusText])}`);\n\n                pusher.unsubscribe(id);\n\n                return imagesResponse;\n            }\n            imagesResponse = await imagesRequest.json();\n        }\n\n        if (imagesResponse?.nsfw) {\n            errorMessagePopup?.$show();\n            break;\n        }\n\n        if (checkImagesFullLoaded(imagesResponse, cacheRun)) {\n            console.timeEnd('waitImagesResult');\n            console.log('All images ready to buy');\n            // removeResultsBusyState();\n            removeResultsUnavailableState(); /** can buy */\n            setBusyButtonState(generateNewSearchPrompt, false);\n            break;\n        }\n\n        const loadedCount = imagesResponse?.images?.filter(item => item.generatedImg).length || 0;\n\n        if (loadedCount > loadedImages) {\n            console.log('updateImagesPreviews :>> ', updateImagesPreviews);\n            timeout += 1000;\n            updateImagesPreviews(imagesResponse);\n            removeResultsBusyState(); /** images visible */\n            loadedImages = loadedCount;\n        }\n\n        console.log(`pending images...next ping in ${(timeout/1000).toFixed(1)} seconds`);\n\n        if (retryCounter) {\n            timeout *= 1.03; \n        } else {\n            timeout = 400;\n        }\n    }\n    pusher.unsubscribe(id);\n\n    if (imagesResponse.images && imagesResponse.images.length === 0) {\n        trackGoogleError(`Can't get images. Probably DB connection error`);\n    }\n\n    updateImagesPreviews(imagesResponse);\n\n    return imagesResponse;\n}\n\nasync function sendPromptRequest(prompt, isFullPrompt) {\n    console.time('generateImages with Replicate AI');\n    const reqDate = Date.now();\n\n    const channel = pusher.subscribe(String(reqDate));\n\n    channel.bind('1', function (data) {\n        // we can handle updates here\n        console.log('<< pusher >>', data);\n        resolvePusher(data.requestId, data)\n    });\n\n    const sendSearch = await fetch(`${LAMBDA_HOST}/prompt`, {\n        method: 'POST',\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            preventAutoExtend,\n            productType: queryProductType,\n            fullPrompt: isFullPrompt && prompt,\n            prompt: querySearch,\n            reqDate,\n            count: GENERATION_COUNT,\n        })\n    });\n\n    const response = await sendSearch.json();\n\n    if (![200, 201].includes(sendSearch.status) || response.error) {\n        console.error(response);\n        errorMessagePopup?.$show()\n\n        return false;\n    }\n\n    console.log('response :>> ', response);\n\n    response.forEach(r => {\n        searchHistory[querySearch] ||= {};\n        searchHistory[querySearch][r.input.prompt] ||= [];\n        searchHistory[querySearch][r.input.prompt].push(r.id);\n        if (r.result) {\n            resolvePusher(r.id, r.result);\n        }\n    })\n    \n    localStorage.setItem(LS_SEARCH_KEY, JSON.stringify(searchHistory));\n\n    console.timeEnd('generateImages with Replicate AI');\n\n    return Promise.all(response.map(r => waitImagesResult(r.id)))\n}\n\nasync function createShopifyProduct(imageId) {\n    console.time('createShopifyProduct');\n    const response = await fetch(`${LAMBDA_HOST}/shopify-product`, {\n        method: 'POST',\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            imageId,\n            type: queryProductType, /* t-shirt ? */\n            prompt: querySearch\n        })\n    });\n    console.log('response :>> ', response.status, response.statusText);\n    console.timeEnd('createShopifyProduct');\n    const json = await response.json();\n    console.log('json :>> ', json);\n    return json;\n}\n\nconst animations = new Map();\nconst ellipsisStart = (label, text) => {\n    const originalText = label.textContent;\n    let step = 0;\n\n    const ellipsis = () => {\n        animations.set(label, {\n            originalText,\n        });\n        label.textContent = text + '.'.repeat(step);\n        step += step < 3 ? 1 : -3;\n    }\n    ellipsis();\n}\nconst ellipsisEnd = label => {\n    const animation = animations.get(label);\n    if (!animation) return;\n    label.textContent = animation.originalText;\n    animations.delete(label);\n}\n\nconst setBusyButtonState = (btn, state) => {\n    const innerLabel = btn.querySelector('SPAN');\n\n    if (state) {\n        btn.classList.add('loading');\n        innerLabel && ellipsisStart(innerLabel, 'Loading');\n    } else {\n        btn.classList.remove('loading');\n        // const textContent = btn.classList.contains('js-generate-more')\n        //     ? 'Create More of this Style'\n        //     : 'Create different styles';\n        innerLabel && ellipsisEnd(innerLabel);\n    }\n};\n\nconst setBusyBuyButtonState = (btn, state) => {\n    const innerLabel = btn.querySelector('SPAN');\n\n    if (state) {\n        btn.classList.add('loading');\n        innerLabel && (innerLabel.textContent = 'Wait');\n    } else {\n        btn.classList.remove('loading');\n        innerLabel && (innerLabel.textContent = '$34.99 Buy Now!');\n    }\n};\n\nconst setResultsBusyState = (_carousel) => {\n    _carousel\n        ? _carousel.classList.add('loading')\n            : document.querySelectorAll('.js-search-view .search__wrapper').forEach(carousel => {\n            carousel.classList.add('loading');\n        });\n};\n\nconst removeResultsBusyState = (_carousel) => {\n    _carousel\n        ? _carousel.classList.remove('loading')\n        : document.querySelectorAll('.js-search-view .search__wrapper').forEach(carousel => {\n            carousel.classList.remove('loading');\n        });\n};\n\nconst removeResultsUnavailableState = (_carousel) => {\n    _carousel\n        ? _carousel.classList.remove('unavailable')\n        : document.querySelectorAll('.js-search-view .search__wrapper').forEach(carousel => {\n            carousel.classList.remove('unavailable');\n        });\n};\n\nfunction setResultsUnavailableState (_carousel) {\n    _carousel\n        ? _carousel.classList.add('unavailable')\n        : document.querySelectorAll('.js-search-view .search__wrapper').forEach(carousel => {\n            carousel.classList.add('unavailable');\n        });\n}\n\nasync function handleOpenProduct(event) {\n    let btnTarget;\n\n    if (event.target.classList.contains('js-get-product-redirect')) {\n        btnTarget = event.target;\n    } else if (event.target.tagName.toLowerCase() === 'img') {\n        btnTarget = event.target.closest('.products-item').querySelector('.js-get-product-redirect');\n    }\n\n    if (!btnTarget || btnTarget.classList.contains('loading')) {\n        return false;\n    }\n\n    const handle = btnTarget.getAttribute('data-handle');\n\n    if (handle) {\n        if (handle.startsWith('not ready')) {\n            const json = await createShopifyProduct(btnTarget.getAttribute('data-id'));\n            btnTarget.setAttribute('data-handle', json.handle);\n        }\n        window.open(`/products/${btnTarget.getAttribute('data-handle')}`, '_blank')\n    } else {\n        setBusyBuyButtonState(btnTarget, true);\n    }\n}\n\nasync function getAvailablePrompts() {\n    const availablePrompts = await fetch(`${LAMBDA_HOST}/available-prompts?prompt=${querySearch}`, {\n        method: 'GET',\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json\",\n        }\n    });\n\n    const jsonResponse = await availablePrompts.json();\n\n    if (availablePrompts.status !== 200) {\n        console.error(jsonResponse);\n        return false;\n    }\n\n    return jsonResponse;\n}\n\nasync function handleGenerateNewStyle() {\n    if (generateNewSearchPrompt.classList.contains('loading')) return false;\n\n    setBusyButtonState(generateNewSearchPrompt, true);\n    /** clone carousel and call swiper */\n    /** get all available random prompts */\n    /** detect unique prompt which did not used */\n    /** sendPromptRequest with new prompt -> will create new item in allPromptResults and update data in new carousel  */\n\n\n    if (!allAvailablePrompts) {\n        allAvailablePrompts = await getAvailablePrompts();\n    }\n\n    let newUniquePrompt;\n\n    for (const element of allAvailablePrompts) {\n        if (!allPromptResults.get(element)) {\n            newUniquePrompt = element;\n\n            break;\n        }\n    }\n\n    if (!newUniquePrompt) {\n        const randomKey = Math.floor(Math.random() * allAvailablePrompts.length);\n\n        newUniquePrompt = allAvailablePrompts[randomKey];\n    }\n\n    const addedCarouselWrapper = addNewCarousel().closest('.search__wrapper');\n\n    setResultsBusyState(addedCarouselWrapper);\n    setResultsUnavailableState(addedCarouselWrapper);\n\n    sendPromptRequest(newUniquePrompt, true)\n        .then(images => {\n            setBusyButtonState(generateNewSearchPrompt, false);\n            removeResultsBusyState();\n            console.log('Got images from Replicate API :>> ', images);\n        });\n}\n\nfunction handleGenerateMore(event) {\n    const moreBtn = event.target.classList.contains('js-generate-more')\n        ? event.target\n        : event.target.closest('.js-generate-more');\n\n    if (!moreBtn) return;\n\n    const carousel = moreBtn.closest('.search__wrapper');\n    const slider = carousel.querySelector('.js-search-products .products-wrapper');\n    const mockupImg = slider.parentNode.getAttribute('data-mockup-src');\n\n    if (moreBtn.classList.contains('loading')) return false;\n\n    for (let i = 0; i < GENERATION_COUNT; i++) {\n        appendItem(slider, `<div class=\"products-item\">\n                    <div class=\"preview-image\"></div>\n                    <img src=\"${mockupImg}\" />\n                    <button class=\"btn btn--secondary js-get-product-redirect button button--secondary\"><span>$34.99 Buy Now!</span></button>\n                </div>`);\n    }\n\n    setResultsBusyState(carousel);\n    setResultsUnavailableState(carousel);\n    setBusyButtonState(moreBtn, true);\n\n    sendPromptRequest(moreBtn.getAttribute('data-prompt'), true)\n        .then(images => {\n            removeResultsBusyState(carousel);\n            setBusyButtonState(moreBtn, false);\n            console.log('Got images from Replicate API :>> ', images);\n        });\n}\n\nfunction pusherInit() {\n    if (!window.Pusher) {\n        return setTimeout(pusherInit, 33)\n    }\n    window.Pusher.logToConsole = true;\n\n    pusher = new window.Pusher(PUSHER_ID, {\n        cluster: 'mt1'\n    });\n}\n\n// INIT PAGE LOAD PROCESSING - FIRST PROMPT\ninit();\n\n\n//# sourceURL=webpack://shopify-theme-lab/./src/js/ai-generator.js?");

/***/ }),

/***/ "./src/js/ai-personaliser.js":
/*!***********************************!*\
  !*** ./src/js/ai-personaliser.js ***!
  \***********************************/
/***/ (() => {

eval("(() => {\n    const isProductPage = window.location.pathname.includes('/product') && document.body.classList.contains('template-product');\n    // const isCartPage = window.location.pathname.includes('/cart');\n    const REQUESTS_LIMIT = 270;\n    const API_HOST = 'https://lime-filthy-duckling.cyclic.app';\n    const queryPhotoKey = new URL(document.location).searchParams.get('key') || '';\n    const photosData = new Map();\n    const LS_QUEUE_PRINTIFY_PRODUCTS = 'currentCreatingProduct';\n    const cartNotification = document.querySelector('#cart-notification');\n    // const mainCartItems = document.querySelector('#main-cart-items');\n    const sleep = ms => new Promise(res => setTimeout(res, ms));\n    // const PHOTOS_API_NAMES = ['generatedImg', 'imageFull'];\n    let imageData;\n\n    let queuePrintifyProducts = JSON.parse(localStorage.getItem(LS_QUEUE_PRINTIFY_PRODUCTS) || '{}');\n    let pendingProducts = Object.keys(queuePrintifyProducts).filter((url) => !queuePrintifyProducts[url]);\n\n    const trackGoogleError = (err) => {\n        window.gtag && window.gtag('event', 'error', {\n            'event_category': 'Replicate AI ERROR',\n            'event_label': 'Images request error',\n            'value': err\n        });\n    };\n\n    const updateProductPreviewData = (imgData) => {\n        imgData = imgData || imageData;\n\n        const productPhotoMedia = document.querySelectorAll('.product__modal-opener--image');\n        const productPhotoGalleryModal = document.querySelectorAll('.product-media-modal__dialog img');\n        const tShirtPhoto = imgData.images[queryPhotoKey]?.generatedImg;\n        \n        if (tShirtPhoto) {\n            productPhotoMedia.forEach((img) => {\n                const previewImg = document.createElement('img');\n                previewImg.className = 'preview-image';\n                previewImg.src = tShirtPhoto;\n\n                img.parentNode.insertBefore(previewImg, img);\n            });\n            productPhotoGalleryModal.forEach((img) => {\n                const previewImg = document.createElement('img');\n                previewImg.className = 'preview-image';\n                previewImg.src = tShirtPhoto;\n\n                img.parentNode.insertBefore(previewImg, img);\n            });\n        }\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const updateCartNotificationPreview = () => {\n        const notificationOptions = cartNotification.querySelectorAll('.product-option');\n        const imageNotification = cartNotification.querySelector('.cart-notification-product__image');\n        const tshirtPhoto = photosData.get('generatedImg');\n\n        notificationOptions.forEach((option) => {\n            const optKey = option.querySelector('dt').textContent;\n\n            if (photosData.get(optKey.replace(':', ''))) {\n                option.classList.add('hidden');\n            }\n        });\n        const previewImg = document.createElement('img');\n\n        previewImg.className = 'preview-image';\n        previewImg.src = tshirtPhoto;\n        imageNotification.parentNode.insertBefore(previewImg, imageNotification);\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const updateCartView = () => {\n        const cartItems = document.querySelectorAll('.cart-item');\n\n        cartItems.forEach((cartItem) => {\n            const img = cartItem.querySelector('.cart-item__image');\n            const itemPhotos = {};\n    \n            if (itemPhotos.generatedImg) {\n                const previewImg = document.createElement('img');\n                \n                previewImg.src = itemPhotos.generatedImg;\n                previewImg.className = 'preview-image';\n\n                img.parentNode.insertBefore(previewImg, img);\n            }\n        });\n    };\n\n    const updateUrlsData = () => {\n        document.querySelectorAll('[data-url]').forEach((dUrl) => {\n            const url = new URL(document.location);\n            const keySearch = url.searchParams.get('key');\n    \n            dUrl.setAttribute('data-url', `${url.pathname}?key=${keySearch}`);\n        });\n    };\n\n    const getImages = async (key) => {\n        let imagesResponse;\n        let timeout = 1000;\n\n        if (!key) return;\n\n        for (let i = 0; i < REQUESTS_LIMIT; i += 1) {\n            const imagesRequest = await fetch(`${API_HOST}/image?imageId=${key}`, {\n                method: 'GET'\n            });\n    \n            imagesResponse = await imagesRequest.json();\n    \n            if (imagesRequest.status !== 200) {\n                console.error(imagesResponse);\n\n                trackGoogleError(`Error images request ${JSON.stringify(imagesResponse)}`);\n                \n                return imagesResponse;\n            }\n\n            if (imagesResponse.length) {\n                imageData = imagesResponse[0];\n                \n                if (imageData.images) {\n                    break;\n                }\n            }\n\n            if (imageData.images[key].generatedImg) {\n                updateProductPreviewData(imageData);\n            }\n\n            console.log(`pending images...next ping in ${timeout/1000} seconds`);\n\n            await sleep(timeout);\n            timeout = 1000;\n        }\n\n        if (imagesResponse.length === 0) {\n            trackGoogleError(`Can't get images. Probably DB connection error`);\n        }\n\n        updateProductPreviewData(imageData);\n\n        return imageData;\n    };\n\n    if (isProductPage && queryPhotoKey) {        \n        getImages(queryPhotoKey);\n\n        const productInfo = document.querySelector('.product__info-wrapper');\n        const variantRadios = document.querySelector('variant-radios');\n        productInfo.classList.add('loading');\n        \n        const productPrintifyInfo = JSON.parse(window.sessionStorage.getItem(queryPhotoKey) || '{}');\n        // const productForm = document.querySelectorAll('.product-form Form');\n\n        let waitIterations = 200;\n\n        const shopifyProductWaiter = (url) => {\n            queuePrintifyProducts = JSON.parse(localStorage.getItem(LS_QUEUE_PRINTIFY_PRODUCTS) || '{}');\n            if (queuePrintifyProducts[url]) {\n                productInfo.classList.remove('loading');\n\n                console.log('Loaded product:', queuePrintifyProducts[url]);\n\n                const variants = queuePrintifyProducts[url].variants;\n\n                variantRadios.variantData = variants; \n                variantRadios.querySelector('[type=\"application/json\"]').textContent = JSON.stringify(variants, null, 2);\n\n                variantRadios.updateOptions();\n                variantRadios.updateMasterId();\n                variantRadios.updateVariantInput();\n                updateUrlsData();\n                variantRadios.updateURL();\n                updateUrlsData();\n            } else {\n                setTimeout(() => shopifyProductWaiter(url), 1000);\n                waitIterations = waitIterations - 1;\n            }\n        }\n\n        if (Object.keys(productPrintifyInfo).length) {\n            const productUrl = `/products/${productPrintifyInfo.title.toLowerCase().replace(/[^a-z|0-9]+/img, '-')}`;\n\n            shopifyProductWaiter(productUrl);\n        }\n        \n        updateUrlsData();\n    }\n\n    let iterations = 300;\n\n    const checkProductCreated = async (productUrl) => {\n        const response = await fetch(`${productUrl}.js`, {method: 'GET'});\n\n        if (response.status === 200) {\n            const productData = await response.json();\n\n            if (productData.available) {\n                console.log('FINALLY got product!!! ', productData);\n\n                queuePrintifyProducts = JSON.parse(localStorage.getItem(LS_QUEUE_PRINTIFY_PRODUCTS) || '{}');\n                queuePrintifyProducts[productUrl] = productData;\n                if (productData.images.length) {\n                    console.log('GOT IMAGES!');\n                } else {\n                    if (iterations > 0) {\n                        setTimeout(() => checkProductCreated(productUrl), 1000);\n                    } else {\n                        console.error('SHOPIFY BUG: Product creation timed out');\n                    }  \n                }\n                window.localStorage.setItem(LS_QUEUE_PRINTIFY_PRODUCTS, JSON.stringify(queuePrintifyProducts));\n                \n            } else {\n                if (iterations > 0) {\n                    setTimeout(() => checkProductCreated(productUrl), 1000);\n                } else {\n                    console.error('SHOPIFY BUG: Product creation timed out');\n                }   \n            }\n        } else {\n            if (iterations > 0) {\n                setTimeout(() => checkProductCreated(productUrl), 1000);\n            } else {\n                console.error('PRINTIFY BUG: Product creation timed out');\n            }\n        }\n    };\n\n    if (pendingProducts.length) {\n        pendingProducts.forEach((url) => {\n            checkProductCreated(url);\n        });\n    }\n})();\n\n\n//# sourceURL=webpack://shopify-theme-lab/./src/js/ai-personaliser.js?");

/***/ }),

/***/ "./src/js/popup.js":
/*!*************************!*\
  !*** ./src/js/popup.js ***!
  \*************************/
/***/ (() => {

eval("document.querySelectorAll('.popup').forEach((p) => {\n  p.$open = () => {\n    p.classList.add('show');\n  };\n  p.$show = (ms = 2500) => {\n    p.$open();\n    setTimeout(() => p.$close(), ms);\n  }\n  p.$close = () => {\n    p.classList.remove('show');\n  };\n})\n\n\n//# sourceURL=webpack://shopify-theme-lab/./src/js/popup.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css/main.scss */ \"./src/css/main.scss\");\n/**\n * imports\n */\n\n// import Cookies from 'js-cookie';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  window.console.log('Hello from main.js 👋.');\n\n  //Close mobile menu \n  let mobileMenu = document.querySelector('#menu-drawer');\n  let menuDrawer = document.querySelector('#Details-menu-drawer-container');\n\n  window.onclick = function(event) {\n    if (event.target != mobileMenu) {\n      menuDrawer.classList.remove('menu-opening');\n    }\n  }\n\n  const dropdowns = document.querySelectorAll('.dropdown-toggle');\n  const dropdownItems = document.querySelectorAll('.dropdown-items [data-val]');\n\n  if (dropdowns?.length > 0) {\n    dropdowns.forEach((dr) => {\n      dr.addEventListener('click', (e) => {\n        e.currentTarget.classList.toggle('active');\n      });\n    });\n  }\n  if (dropdownItems?.length > 0) {\n    dropdownItems.forEach((di => {\n      di.addEventListener('click', (e) => {\n        const item = e.currentTarget;\n        const parentDropdown = item.closest('[data-target]');\n        const trgButtonSel = parentDropdown ? parentDropdown.getAttribute('data-target') : null;\n\n        parentDropdown.querySelectorAll('[data-val]').forEach((it) => {\n          it.classList.remove('active');\n        });\n        item.classList.add('active');\n\n        if (trgButtonSel) {\n          const trgButton = document.querySelector(trgButtonSel);\n          const trgLabel = trgButton ? trgButton.querySelector('.dropdown-label') : null;\n\n          trgLabel && (trgLabel.innerHTML = item.innerText);\n          trgButton && trgButton.classList.toggle('active', false);\n          const hiddenVal = trgButton.querySelector('input[type=\"hidden\"]');\n          hiddenVal && (hiddenVal.value = item.getAttribute('data-val'));\n        }\n      })\n    }))\n  }\n  document.body.addEventListener('click', (e) => {\n    const trg = e.target;\n\n    if (!(trg.classList.contains('dropdown-items') || trg.closest('.dropdown-items') || \n        trg.classList.contains('dropdown-toggle') || trg.closest('.dropdown-toggle'))) {\n      const activeDropdowns = document.querySelectorAll('.dropdown-toggle.active');\n\n      activeDropdowns.forEach((dropdown) => {\n        dropdown.classList.remove('active');\n      })\n    }\n  })\n});\n\n\n//# sourceURL=webpack://shopify-theme-lab/./src/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_require__("./src/main.js");
/******/ 	__webpack_require__("./src/js/ai-generator.js");
/******/ 	__webpack_require__("./src/js/ai-personaliser.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/popup.js");
/******/ 	
/******/ })()
;
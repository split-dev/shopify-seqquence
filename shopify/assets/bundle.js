/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/css/main.scss":
/*!***************************!*\
  !*** ./src/css/main.scss ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://shopify-theme-lab/./src/css/main.scss?");

/***/ }),

/***/ "./src/js/ai-generator.js":
/*!********************************!*\
  !*** ./src/js/ai-generator.js ***!
  \********************************/
/***/ (() => {

eval("// CONSTANTS\n// const S3_HOST = 'https://aipr.s3.amazonaws.com';\n// const LAMBDA_HOST = 'https://q65eekxnmbwkizo3masynrpea40rylba.lambda-url.us-east-1.on.aws'; // us-east-1 - prod\nconst LAMBDA_HOST = 'https://r4qlyqjkf4sankpkqcvzdqgm540sozvz.lambda-url.eu-central-1.on.aws'; // eu_central-1 - for testing\nconst PUSHER_ID = '19daec24304eedd7aa8a';\nconst GENERATION_COUNT = 3;\nconst DEFAULT_QUERY_SEARCH = 'Panda jumping';\n\nconst searchParams = new URL(document.location).searchParams;\n\nconst querySearch = searchParams.get('search') || DEFAULT_QUERY_SEARCH;\nconst queryProductType = searchParams.get('productType') || 'UCTS';\nconst preventAutoExtend = (searchParams.get('preventAutoExtend') === \"on\");\nconst DEFAULT_T_SHIRT = 'UCTS';\nconst SKU_CASE = 'CASE';\nconst DEFAULT_COLOR = 'White';\n\nconst LS_SEARCH_KEY = 'ai-search';\n\nconst WAIT_AI_FIRST = 4000;\nconst WAIT_AI_CACHE = 500;\nconst WAIT_AI_NEXT = 2000;\n\nconst REQUESTS_LIMIT = 30;\nconst WAIT_AI_FIRST_RETRY = 667;\nconst WAIT_AI_RETRY_INCREASE = 1.08;\n\nconsole.time('init');\n// VARIABLES\nlet searchHistory = JSON.parse(localStorage.getItem(LS_SEARCH_KEY) || '{}');\n\nconst allPromptResults = new Map();\n\nlet allAvailablePrompts;\nlet searchResultDomCarousels = document.querySelectorAll('.js-search-view .search__wrapper');\nlet pusher;\nconst animations = new Map();\n\n// BIND ELEMENTS CONTROLS\nconst searchForm = document.getElementById('aiSearch');\nconst searchViews = document.querySelectorAll('.js-search-view');\nconst productTypeLabel = document.querySelector('.product_type_label span');\n/** Buttom on the page bottom for generating new search carousels */\nconst generateNewSearchPrompt = document.querySelector('.js-get-new-prompt');\nconst searchDomTemplate = document.querySelector('.js-search-dom-template');\nconst errorMessagePopup = document.getElementById('error_message')\n\nfunction actualisePreviewMockups(reqProductType, changeColors) {\n    reqProductType = reqProductType || getSelectedProductType();\n\n\n    const requestedPreviewMockup = window.productImages[reqProductType] || window.productImages.UCTS;\n    const productColorSel = document.querySelectorAll('.product_color_filter .product_radiobutton input:checked');\n\n    document.querySelectorAll('.preview-mockup').forEach((_mock) => {\n        const selectedColor = productColorSel.length > 0 ? productColorSel[0].value : null;\n        const availableColors = Object.keys(requestedPreviewMockup);\n        const randColor = availableColors[Math.floor(Math.random() * availableColors.length)] || DEFAULT_COLOR;\n        let currColor = _mock.parentNode.querySelector('.preview-image').getAttribute('data-preview-color')\n        if (!availableColors.includes(currColor)) {\n            currColor = null;\n        }\n        const newColor = !changeColors && currColor || randColor;\n        const _color = requestedPreviewMockup[selectedColor] ? selectedColor : newColor;\n\n        _mock.parentNode.parentNode.classList.add('product-type' + reqProductType)\n        if (reqProductType === SKU_CASE) {\n            _mock.parentNode.classList.add('downscaled');\n            _mock.classList.add('case-frame')\n            // return;\n        } else {\n            _mock.parentNode.classList.remove('downscaled');\n            _mock.classList.remove('case-frame')\n        }\n        _mock.src = requestedPreviewMockup[_color];\n        _mock.parentNode.querySelector('.preview-image').setAttribute('data-preview-format', reqProductType);\n        _mock.parentNode.querySelector('.preview-image').setAttribute('data-preview-color', _color);\n    });\n  \n    document.querySelectorAll('.product_color_filter .product_radiobutton').forEach((rdbtn) => {\n      rdbtn.classList.remove('hidden');\n      if (!requestedPreviewMockup[rdbtn.getAttribute('data-val')]) {\n        rdbtn.classList.add('hidden');\n      }\n    });\n}\n\n// BIND HANDLERS\nfunction bindHanlers() {\n    window.onpopstate = function (event) {\n        console.warn(`location: ${document.location}, state: ${JSON.stringify(event.state)}`)\n    }\n    document.querySelector('.search')?.addEventListener('click', handleOpenProduct);\n    generateNewSearchPrompt?.addEventListener('click', handleGenerateNewStyle);\n    searchViews?.forEach((searchView) => {\n        searchView.addEventListener('click', handleGenerateMore);\n    });\n    \n    const searchInput = searchForm.querySelector('input[name=\"search\"]');\n\n    searchInput.addEventListener('blur', () => {\n        if (searchInput.value.length === 0) {\n            searchInput.value = searchInput.placeholder;\n        }\n    });\n\n    const productTypeRadio = searchForm.querySelector('radiogroup.product_type_filter');\n    const productColorRadio = document.querySelector('radiogroup.product_color_filter');\n\n    productTypeRadio.addEventListener('change', (e) => {\n        const reqProductType = e.target.value;\n        const url = new URL(window.location.href);\n        url.searchParams.set('productType', reqProductType);\n        history.replaceState && history.replaceState({ reqProductType }, null, url.href)\n        \n        actualisePreviewMockups(reqProductType, true);\n    });   \n    productColorRadio.addEventListener('change', () => {\n        actualisePreviewMockups();\n    });    \n\n    window.addEventListener(\"storage\", function (e) {\n        console.log('storage event :>> ', e);\n        if (e.key === LS_SEARCH_KEY) {\n            searchHistory = JSON.parse(e.newValue)\n            if (querySearch.length && searchHistory[querySearch]) {\n                Object.entries(searchHistory[querySearch]).forEach(([prompt, requestData]) => {\n                    if (typeof requestData[0] === 'string') {\n                        requestData = requestData.map(id => ({ id }))\n                        prompt = prompt.slice(querySearch.length)\n                        searchHistory[querySearch][prompt] = requestData;\n                        delete searchHistory[querySearch][querySearch + prompt]\n                    }\n                })\n            }\n        }\n    });\n}\n\n\nfunction appendItem(parentElement, itemHtml) {\n    const tempContainer = document.createElement('div');\n\n    tempContainer.innerHTML = itemHtml;\n    parentElement.appendChild(tempContainer.firstChild);\n}\n\nfunction init() {\n    if (!searchForm || !searchViews.length) return;\n    console.timeLog('init', 'init  start');\n\n    // searchForm.querySelector('input[name=\"search\"]').value = querySearch;\n    // searchForm.querySelector('input[name=\"preventAutoExtend\"]').checked = preventAutoExtend;\n\n    if (queryProductType && queryProductType.length) {\n        const selectedTypeCheckbox = searchForm.querySelector('input[name=\"productType\"][value=\"'+queryProductType+'\"]');\n\n        selectedTypeCheckbox.checked = true;\n        productTypeLabel && (productTypeLabel.innerHTML = searchForm.querySelector('input[name=\"productType\"][value=\"'+queryProductType+'\"]').closest('LABEL').innerText);\n    }\n    // actualisePreviewMockups(getSelectedProductType())\n\n    Promise.resolve(getPromptComplitions())\n        .then(json => {\n            allAvailablePrompts = json;\n            // console.log(json)\n        })\n        .catch(console.error)\n\n    try {\n        pusherInit();\n    } catch (e) {\n        console.error('pusher error', e)\n    }\n\n    if (querySearch.length) {\n        // GET CACHED\n        if (searchHistory[querySearch]) {\n            Promise.all(Object.entries(searchHistory[querySearch]).map(([prompt, requestData]) => {\n                if (typeof requestData[0] === 'string') {\n                    requestData = requestData.map(id => ({ id }))\n                    prompt = prompt.slice(querySearch.length)\n                    searchHistory[querySearch][prompt] = requestData;\n                    delete searchHistory[querySearch][querySearch + prompt]\n                }\n                console.log('requestData :>> ', requestData);\n                return Promise.all(requestData.map(r => {\n                    console.log('r :>> ', r);\n                    if (r.images?.length === 3) {\n                        updateImagesPreviews({\n                            prompt: querySearch + prompt,\n                            images: r.images\n                        })\n                        console.timeLog('init', 'updateImagesPreviews');\n\n                        \n                    } else {\n                        return waitImagesResult(r.id, true)\n                    }\n                }))\n            })).then(() => {\n                removeResultsBusyState();\n                actualisePreviewMockups(getSelectedProductType());\n            }).catch(console.error);\n            // const requestIds = Object.values(searchHistory[querySearch])\n            //     .reduce((prev, curr) => prev.concat(curr), []);\n\n            // Promise.all(requestIds.map(id => waitImagesResult(id, true)))\n            //     .then((images) => {\n            //         removeResultsBusyState();\n            //     })\n            //     .catch(console.error);\n            \n        // GENERATE\n        } else {\n            setResultsUnavailableState();\n            sendPromptRequest(querySearch, false)\n                .then(() => {\n                    removeResultsBusyState();\n                })\n                .catch(console.error);\n        }\n    }\n    console.timeEnd('init')\n    bindHanlers();\n}\n\nconst trackGoogleError = (err) => {\n    window.gtag && window.gtag('event', 'error', {\n        'event_category': 'Replicate AI ERROR',\n        'event_label': 'Images request error',\n        'value': err\n    });\n};\n\nfunction getSelectedProductType() {\n    const selectedTypeCheckbox = searchForm.querySelector('input[name=\"productType\"]:checked');\n\n    return selectedTypeCheckbox?.value || queryProductType || DEFAULT_T_SHIRT;\n}\n\nfunction getSelectedProductColor() {\n    const selectedColorCheckbox = searchForm.querySelector('input[name=\"productColor\"]:checked');\n\n    return selectedColorCheckbox?.value || DEFAULT_COLOR;\n}\n\nfunction addNewCarousel () {\n    const newSearchDom = searchDomTemplate.content.cloneNode(true);\n    const searchContainer = generateNewSearchPrompt.closest('.js-search-view');\n\n    searchDomTemplate.before(newSearchDom);\n\n    const newProductsList = searchContainer.querySelector('.search__wrapper:last-of-type .js-search-products');\n\n    return newProductsList;\n}\n\nfunction updateImagesPreviews (promptResult) {\n    searchResultDomCarousels = document.querySelectorAll('.js-search-view .search__wrapper');\n\n    if (promptResult.error) {\n        trackGoogleError(promptResult.error);\n    } else {\n        const ids = promptResult.images.map(img => img.id)\n        const prevResults = allPromptResults.get(promptResult.prompt)?.filter(result => {\n            return !ids.includes(result.id)\n        });\n        \n        const imgs = [\n            ...prevResults || [],\n            ...promptResult.images,\n        ];\n        allPromptResults.set(promptResult.prompt, imgs);\n    }\n\n    const promptSearchesIterator = allPromptResults.keys();\n    const uniqueSearches = Array.from(promptSearchesIterator);\n\n    uniqueSearches.forEach((search, i) => {\n        let imgs = allPromptResults.get(search);\n\n        imgs = imgs?.filter(img => img && img.generatedImg);\n\n        if (!searchResultDomCarousels[i]) {\n            addNewCarousel();\n            searchResultDomCarousels = document.querySelectorAll('.js-search-view .search__wrapper');\n        }\n\n        const slider = searchResultDomCarousels[i].querySelector('.js-search-products .products-wrapper');\n        const searchPrompt = searchResultDomCarousels[i].querySelector('.js-search-prompt');\n        const generateMoreBtn = searchResultDomCarousels[i].querySelector('.js-generate-more');\n        const reqProductType = getSelectedProductType();\n\n        searchPrompt && (searchPrompt.textContent = search);\n        generateMoreBtn && generateMoreBtn.setAttribute('data-prompt', search);\n\n        if (slider) {\n            imgs.forEach((img, j) => {\n                const slide = slider.querySelectorAll('.products-item')[j];\n                if (slide) {\n                    const redirectBtn = slide.querySelector('.js-get-product-redirect');\n                    slide.querySelector('.preview-image').style.backgroundImage = `url(${img.generatedImg})`;\n                    img.handle ||= 'not ready';\n                    redirectBtn.setAttribute('data-id', `${img.id}`)\n                    // redirectBtn.setAttribute('data-handle', `${img.handle || ''}`);\n                    // img.handle || redirectBtn.classList.add('loading');\n                    slide.classList.add('customized');\n                } else {\n                    appendItem(slider, `<div class=\"products-item customized\">\n                        <div class=\"preview-container\">\n                            <div class=\"preview-image\" data-preview-format=\"${reqProductType}\" style=\"background-image: url(${img.generatedImg})\"></div>\n                            <img class=\"preview-mockup\"/>\n                        </div>\n                        <button data-id=\"${img.id}\" data-handle=\"${img.handle || ''}\" class=\"btn btn--secondary ${img.handle ? '' : 'loading'} js-get-product-redirect button button--secondary\"><span>${img.handle ? 'Buy Now!' : 'Wait'}</span></button>\n                    </div>`);\n                }\n\n                slide && setBusyBuyButtonState(slide.querySelector('.btn'), false);\n            });\n\n            actualisePreviewMockups(reqProductType);\n        }\n    });\n}\n\nfunction checkImagesFullLoaded (pendImagesResult, cacheRun) {\n    const loaded = pendImagesResult?.images?.length;\n    const isFullLoaded = (cacheRun ? loaded === 3 : loaded) && pendImagesResult.images.every(image => {\n        if (cacheRun) {\n            image.handle ||= 'not ready';\n        }\n        \n        return image.handle;\n    });\n\n    console.log('pendImagesResult :>> ', pendImagesResult, isFullLoaded);\n\n    return isFullLoaded;\n}\n\nconst timeouts = {};\nfunction resolvePusher(id, data) {\n    timeouts[id]?.resolve(data);\n    updateImagesPreviews(data);\n}\nfunction waitPusher (id, ms) {\n    return new Promise(resolve => {\n        const timeout = setTimeout(resolve, ms);\n\n        timeouts[id] = {\n            resolve(data) {\n                clearTimeout(timeout);\n                Array.isArray(data) || (data = [data])\n                resolve(data);\n            }\n        }\n    });\n}\n\nasync function waitImagesResult (id, cacheRun) {\n    console.time('waitImagesResult', id, cacheRun);\n\n    let imagesResponse;\n    let timeout = cacheRun ? 1 : WAIT_AI_FIRST; // 3s for AI and 1s for crop\n    let loadedImages = 0;\n\n    // if (!cacheRun) {\n    //     const channel = pusher.subscribe(id);\n\n    //     channel.bind('1', function (data) {\n    //         // we can handle updates here\n    //         console.log('<< pusher >>', data);\n    //         resolvePusher(id, data)\n    //     });\n    // }\n\n    for (let retryCounter = 0; retryCounter < REQUESTS_LIMIT; retryCounter += 1) {\n        if (cacheRun) {\n            cacheRun = false;\n            timeout = WAIT_AI_CACHE;\n        } else {\n            imagesResponse = await waitPusher(id, timeout); // pusher can send data earlier to us\n        }\n        \n        if (!imagesResponse) {\n            const imagesRequest = await fetch(`${LAMBDA_HOST}/image?requestId=${id}`, {\n                method: 'GET'\n            });\n            if (imagesRequest.status !== 200) {\n                console.error(imagesRequest.status, imagesRequest.statusText);\n\n                trackGoogleError(`Error images request ${JSON.stringify([imagesRequest.status, imagesRequest.statusText])}`);\n\n                pusher.unsubscribe(id);\n\n                return imagesResponse;\n            }\n            imagesResponse = await imagesRequest.json();\n        }\n\n        if (imagesResponse?.nsfw) {\n            errorMessagePopup?.$show();\n            break;\n        }\n        const loadedCount = imagesResponse?.images?.filter(item => item.generatedImg).length || 0;\n        \n        if (checkImagesFullLoaded(imagesResponse, cacheRun)) {\n            const extendedPrompt = imagesResponse.prompt.slice(querySearch.length);\n            \n            const item = searchHistory[querySearch][extendedPrompt].find(item => item.id === imagesResponse.requestId)\n            item.images = imagesResponse.images.map(({ id, handle, generatedImg }) => {\n                return {\n                    id, handle, generatedImg\n                }\n            })\n            localStorage.setItem(LS_SEARCH_KEY, JSON.stringify(searchHistory))\n            console.timeEnd('waitImagesResult');\n            // removeResultsBusyState();\n            removeResultsUnavailableState(); /** can buy */\n            setBusyButtonState(generateNewSearchPrompt, false);\n            document.querySelectorAll('.js-generate-more').forEach((moreBtn) => {\n                setBusyButtonState(moreBtn, false);\n            });\n            break;\n        }\n\n        if (loadedCount > loadedImages) {\n            timeout = WAIT_AI_NEXT;\n            updateImagesPreviews(imagesResponse);\n            removeResultsBusyState(); /** images visible */\n            loadedImages = loadedCount;\n        }\n\n        if (retryCounter === 0) {\n            timeout = WAIT_AI_FIRST_RETRY;\n        } else {\n            timeout *= WAIT_AI_RETRY_INCREASE; \n        }\n    }\n    pusher.unsubscribe(id);\n\n    if (imagesResponse.images && imagesResponse.images.length === 0) {\n        trackGoogleError(`Can't get images. Probably DB connection error`);\n    }\n\n    updateImagesPreviews(imagesResponse);\n\n    return imagesResponse;\n}\n\nasync function sendPromptRequest(prompt, isFullPrompt) {\n    console.time('generateImages with Replicate AI');\n    const reqDate = Date.now();\n\n    const channel = pusher.subscribe(String(reqDate));\n\n    channel.bind('1', function (data) {\n        // we can handle updates here\n        resolvePusher(data.requestId, data)\n    });\n\n    const sendSearch = await fetch(`${LAMBDA_HOST}/prompt`, {\n        method: 'POST',\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            preventAutoExtend,\n            productType: getSelectedProductType(),\n            fullPrompt: isFullPrompt && prompt,\n            prompt: querySearch,\n            reqDate,\n            count: GENERATION_COUNT,\n        })\n    });\n\n    const response = await sendSearch.json();\n\n    if (![200, 201].includes(sendSearch.status) || response.error) {\n        console.error(response);\n        errorMessagePopup?.$show()\n\n        return false;\n    }\n\n\n    response.forEach(r => {\n        searchHistory[querySearch] ||= {};\n        const extendedPrompt = r.input.prompt.slice(querySearch.length)\n\n        searchHistory[querySearch][extendedPrompt] ||= [];\n        searchHistory[querySearch][extendedPrompt].push({ id: r.id });\n        if (r.result) {\n            resolvePusher(r.id, r.result);\n        }\n    })\n    \n    localStorage.setItem(LS_SEARCH_KEY, JSON.stringify(searchHistory));\n\n    console.timeEnd('generateImages with Replicate AI');\n\n    return Promise.all(response.map(r => waitImagesResult(r.id)))\n}\n\nasync function createShopifyProduct(imageId, type, color) {\n    console.time('createShopifyProduct', color);\n    const response = await fetch(`${LAMBDA_HOST}/shopify-product`, {\n        method: 'POST',\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            imageId,\n            type,\n            productVariant: color,\n            prompt: querySearch\n        })\n    });\n    console.timeEnd('createShopifyProduct');\n    const json = await response.json();\n\n    return json;\n}\n\nfunction ellipsisStart (label, text) {\n    const originalText = label.textContent;\n    let step = 0;\n\n    const ellipsis = () => {\n        animations.set(label, {\n            originalText,\n        });\n        label.textContent = text + '.'.repeat(step);\n        step += step < 3 ? 1 : -3;\n    }\n    ellipsis();\n}\nfunction ellipsisEnd (label) {\n    const animation = animations.get(label);\n    if (!animation) return;\n    label.textContent = animation.originalText;\n    animations.delete(label);\n}\n\nfunction setBusyButtonState (btn, state) {\n    const innerLabel = btn.querySelector('SPAN');\n\n    if (state) {\n        btn.classList.add('loading');\n        innerLabel && ellipsisStart(innerLabel, 'Loading');\n    } else {\n        btn.classList.remove('loading');\n        // const textContent = btn.classList.contains('js-generate-more')\n        //     ? 'Create More of this Style'\n        //     : 'Create different styles';\n        innerLabel && ellipsisEnd(innerLabel);\n    }\n}\n\nfunction setBusyBuyButtonState (btn, state) {\n    const innerLabel = btn.querySelector('SPAN');\n\n    if (state) {\n        btn.classList.add('loading');\n        innerLabel && (innerLabel.textContent = 'Wait');\n    } else {\n        btn.classList.remove('loading');\n        innerLabel && (innerLabel.textContent = 'Buy Now!');\n    }\n}\n\nfunction setResultsBusyState (_carousel) {\n    _carousel\n        ? _carousel.classList.add('loading')\n            : document.querySelectorAll('.js-search-view .search__wrapper').forEach(carousel => {\n            carousel.classList.add('loading');\n        });\n}\n\nfunction removeResultsBusyState (_carousel) {\n    _carousel\n        ? _carousel.classList.remove('loading')\n        : document.querySelectorAll('.js-search-view .search__wrapper').forEach(carousel => {\n            carousel.classList.remove('loading');\n        });\n}\n\nfunction removeResultsUnavailableState (_carousel) {\n    _carousel\n        ? _carousel.classList.remove('unavailable')\n        : document.querySelectorAll('.js-search-view .search__wrapper').forEach(carousel => {\n            carousel.classList.remove('unavailable');\n        });\n}\n\nfunction setResultsUnavailableState (_carousel) {\n    _carousel\n        ? _carousel.classList.add('unavailable')\n        : document.querySelectorAll('.js-search-view .search__wrapper').forEach(carousel => {\n            carousel.classList.add('unavailable');\n        });\n}\n\nasync function handleOpenProduct(event) {\n    let btnTarget;\n\n    if (event.target.classList.contains('js-get-product-redirect')) {\n        btnTarget = event.target;\n    } else if (event.target.tagName.toLowerCase() === 'img') {\n        btnTarget = event.target.closest('.products-item').querySelector('.js-get-product-redirect');\n    }\n\n    if (!btnTarget || btnTarget.classList.contains('loading')) {\n        return false;\n    }\n\n    setBusyBuyButtonState(btnTarget, true);\n    \n    const colorElem = btnTarget.closest('.products-item').querySelector('[data-preview-color]');\n    // const handle = btnTarget.getAttribute('data-handle');\n\n    const params = {\n        imageId: btnTarget.getAttribute('data-id'),\n        type: getSelectedProductType(),\n        color: colorElem.getAttribute('data-preview-color') || getSelectedProductColor() || DEFAULT_COLOR\n    }\n    const json = await createShopifyProduct(params.imageId, params.type, params.color);\n    setBusyBuyButtonState(btnTarget, false)\n    const href = `/products/${json.handle}`;\n    const handle = window.open(href, Object.values(params).join('-'))\n    if (!handle) {\n        window.location.href = href;\n    }\n}\n\n// eslint-disable-next-line no-unused-vars\nasync function getAvailablePrompts() {\n    const availablePrompts = await fetch(`${LAMBDA_HOST}/available-prompts?prompt=${querySearch}`, {\n        method: 'GET',\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json\",\n        }\n    });\n\n    const jsonResponse = await availablePrompts.json();\n\n    if (availablePrompts.status !== 200) {\n        console.error(jsonResponse);\n        return false;\n    }\n\n    return jsonResponse;\n}\n\nasync function handleGenerateNewStyle() {\n    if (generateNewSearchPrompt.classList.contains('loading')) return false;\n\n    setBusyButtonState(generateNewSearchPrompt, true);\n    /** clone carousel and call swiper */\n    /** get all available random prompts */\n    /** detect unique prompt which did not used */\n    /** sendPromptRequest with new prompt -> will create new item in allPromptResults and update data in new carousel  */\n\n\n    if (!allAvailablePrompts) {\n        // allAvailablePrompts = await getAvailablePrompts();\n        allAvailablePrompts = getPromptComplitions();\n    }\n\n    let newUniquePrompt;\n\n    for (const element of allAvailablePrompts) {\n        if (!allPromptResults.get(element)) {\n            newUniquePrompt = element;\n\n            break;\n        }\n    }\n\n    if (!newUniquePrompt) {\n        const randomKey = Math.floor(Math.random() * allAvailablePrompts.length);\n\n        newUniquePrompt = allAvailablePrompts[randomKey];\n    }\n\n    console.log('newUniquePrompt', newUniquePrompt)\n\n    const addedCarouselWrapper = addNewCarousel().closest('.search__wrapper');\n\n    setResultsBusyState(addedCarouselWrapper);\n    setResultsUnavailableState(addedCarouselWrapper);\n    actualisePreviewMockups();\n\n    sendPromptRequest(newUniquePrompt, true)\n        .then(() => {\n            setBusyButtonState(generateNewSearchPrompt, false);\n            removeResultsBusyState();\n        });\n}\n\nfunction handleGenerateMore(event) {\n    const moreBtn = event.target.classList.contains('js-generate-more')\n        ? event.target\n        : event.target.closest('.js-generate-more');\n\n    if (!moreBtn) return;\n\n    const carousel = moreBtn.closest('.search__wrapper');\n    const slider = carousel.querySelector('.js-search-products .products-wrapper');\n    const reqProductType = getSelectedProductType();\n\n    if (moreBtn.classList.contains('loading')) return false;\n\n    for (let i = 0; i < GENERATION_COUNT; i++) {\n        appendItem(slider, `<div class=\"products-item\">\n                    <div class=\"preview-container\">\n                        <div class=\"preview-image\" data-preview-format=\"${reqProductType}\"></div>\n                        <img class=\"preview-mockup\"/>\n                    </div>\n                    <button class=\"btn btn--secondary js-get-product-redirect button button--secondary\"><span>Buy Now!</span></button>\n                </div>`);\n    }\n\n    actualisePreviewMockups(reqProductType);\n    setResultsBusyState(carousel);\n    setResultsUnavailableState(carousel);\n    setBusyButtonState(moreBtn, true);\n\n    sendPromptRequest(moreBtn.getAttribute('data-prompt'), true)\n        .then(images => {\n            removeResultsBusyState(carousel);\n            setBusyButtonState(moreBtn, false);\n            console.log('Got images from Replicate API :>> ', images);\n        });\n}\n\nfunction pusherInit() {\n    if (!window.Pusher) {\n        return setTimeout(pusherInit, 33)\n    }\n    window.Pusher.logToConsole = true;\n\n    pusher = new window.Pusher(PUSHER_ID, {\n        cluster: 'mt1'\n    });\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction compressText(text) {\n    const nonWordRegex = /[^\\w\\d]+/g\n    const wordRegex = /[\\w\\d]+/g\n    let dictionary = {};\n\n    // save all worlds and their count\n    text.split(nonWordRegex).forEach(item => { dictionary[item] ||= 0; dictionary[item]++ });\n\n    // create DESC sorted worlds array\n    dictionary = Object\n        .entries(dictionary)\n        // .filter(kv => kv[1] > 1)\n        .sort((kv1, kv2) => kv2[1] - kv1[1])\n        .map(kv => kv[0])\n\n    const compressedText = text.replace(wordRegex, (word) => dictionary.indexOf(word).toString(8))\n\n    return {\n        dictionary,\n        compressedText\n    }\n}\n\nfunction decompressText({\n    dictionary,\n    compressedText\n}) {\n    const wordRegex = /[\\w\\d]+/g;\n    return compressedText.replace(wordRegex, (hash) => dictionary[parseInt(hash, 36)])\n}\n\nfunction getPromptComplitions(prompt = querySearch) {\n    const d = 'detailed,details,by,intricate,highly,vibrant,breathtaking,ultra,fine,good,proportions,colorful,art,painting,and,artstation,unreal,engine,style,cinematic,color,render,concept,Greg,4k,volumetric,octane,on,8k,sharp,digital,of,masterpiece,detail,illustration,lighting,centered,,Rutkowski,inspired,extreme,HQ,trending,pastel,anime,environment,rossdraws,greg,rutkowski,full,key,visual,panoramic,Carne,Griffiths,Conrad,Roset,Makoto,Shinkai,cosmicwonder,photography,high,24mm,realistic,fantasy,elegant,focus,Hyperrealism,totem,Ivan,5,60,Dustin,Nguyen,Akihiko,Yoshida,Tocchini,Cliff,Chiang,resolution,Dishonored,bravely,default,but,dreary,red,black,white,scheme,epic,long,shot,dark,mood,strong,backlighting,lights,smoke,volutes,renderer,8K,3d,ultradetailed,devianart,cgsociety,clean,ghibli,breath,the,wild,tim,okamura,victor,nizovtsev,noah,bradley,graffiti,paint,hyperrealistic,focused,Pixar,photorealistic,hdr,definition,symmetrical,face,photo,DSLR,quality,fps,not,cropped,painted,smooth,gaston,bussiere,alphonse,mucha,marble,jade,sculpture,fog,cyber,background,stunning,wide,angle,pen,ink,line,drawings,craig,mullins,ruan,jia,kentaro,miura,loundraw,aztek,greeble,tribal,fanart,ornate,heartstone,ankama,gta5,cover,official,behance,hd,Jesper,Ejsing,RHADS,Lois,van,baarle,ilya,kuvshinov,radiating,a,glowing,aura,matte,WLOP,Artgerm,Alphonse,Mucha,poster,hill,precise,lineart,Gustav,Klimt,Pablo,Picasso,Banksy,Arthur,Adams,Eileen,Agar,Yaacov,Agam,Jacques,Laurent,Agasse,Aivazovsky,David,Aja,Rafael,Albuquerque,Chiho,Aoshima,Hirohiko,Araki,Alexander,Archipenko,El,Anatsui,Karol,Bak,Christopher,Balaskas,Carl,Barks,Cicely,Mary,Barker,Jean,Michel,Basquiat,Romare,Bearden,Aubrey,Beardsley,Bilibin,Xu,Bing,Robert,Bissell,Anna,Bocek,Richard,Parkes,Bonington,Franklin,Booth,Susan,Seddon,Boulet,Frank,Bramley,Georges,Braque,Mark,Briscoe,Stasia,Burrington,Pascale,Campion,Camilla,dErrico,Michael,DeForge';\n    const compressedText = `[\n        \"detailed,details,by,intricate,highly,vibrant,breathtaking,ultra,fine,good,proportions,colorful,art,painting,and,artstation,unreal,engine,style,cinematic,color,render,concept,Greg,4k,volumetric,octane,on,8k,sharp,digital,of,masterpiece,detail,illustration,lighting,centered,,Rutkowski,inspired,extreme,HQ,trending,pastel,anime,environment,rossdraws,greg,rutkowski,full,key,visual,panoramic,Carne,Griffiths,Conrad,Roset,Makoto,Shinkai,cosmicwonder,photography,high,24mm,realistic,fantasy,elegant,focus,Hyperrealism,totem,Ivan,5,60,Dustin,Nguyen,Akihiko,Yoshida,Tocchini,Cliff,Chiang,resolution,Dishonored,bravely,default,but,dreary,red,black,white,scheme,epic,long,shot,dark,mood,strong,backlighting,lights,smoke,volutes,renderer,8K,3d,ultradetailed,devianart,cgsociety,clean,ghibli,breath,the,wild,tim,okamura,victor,nizovtsev,noah,bradley,graffiti,paint,hyperrealistic,focused,Pixar,photorealistic,hdr,definition,symmetrical,face,photo,DSLR,quality,fps,not,cropped,painted,smooth,gaston,bussiere,alphonse,mucha,marble,jade,sculpture,fog,cyber,background,stunning,wide,angle,pen,ink,line,drawings,craig,mullins,ruan,jia,kentaro,miura,loundraw,aztek,greeble,tribal,fanart,ornate,heartstone,ankama,gta5,cover,official,behance,hd,Jesper,Ejsing,RHADS,Lois,van,baarle,ilya,kuvshinov,radiating,a,glowing,aura,matte,WLOP,Artgerm,Alphonse,Mucha,poster,hill,precise,lineart,Gustav,Klimt,Pablo,Picasso,Banksy,Arthur,Adams,Eileen,Agar,Yaacov,Agam,Jacques,Laurent,Agasse,Aivazovsky,David,Aja,Rafael,Albuquerque,Chiho,Aoshima,Hirohiko,Araki,Alexander,Archipenko,El,Anatsui,Karol,Bak,Christopher,Balaskas,Carl,Barks,Cicely,Mary,Barker,Jean,Michel,Basquiat,Romare,Bearden,Aubrey,Beardsley,Bilibin,Xu,Bing,Robert,Bissell,Anna,Bocek,Richard,Parkes,Bonington,Franklin,Booth,Susan,Seddon,Boulet,Frank,Bramley,Georges,Braque,Mark,Briscoe,Stasia,Burrington,Pascale,Campion,Camilla,dErrico,Michael,DeForge\",\n        \"4 0, 2 20 21, 22 23, n 24, n 12, 25 26, o 27, 28 13, 29 2a 13, 5 2b 2c 2d, 2e e 2f k 2g, 2h 14 2i 2j, 2k 2l e 2m 2n, p 2o, 2p 2q, f 15, g h, q 2r, 15, 2s\",\n        \"2t l, g h, 2u, 16 r f, 2v, 2w, m c, s, l\",\n        \"17, 18 i, 2x t u c, 19 m c, 2 1a, 2y, 2z v 30 31, 1b 1c\",\n        \"2 32 33, 34 35, 36 37, 16 r f, s, w, 38 39, 8 x, 1d v k, 3 x, y\",\n        \"0, 3, 1d v k, j z, 3a, 3b, 14 1, g h 1y, j, w\",\n        \"10 , 0, 18 i, 1e 1f ,3 x, 4 0, 6, 5, 1g, j, 1h 1i, 1j 1k, 1l 1m\",\n        \"3c i,o, s, g h, q l 3d 2 1n, 3e, 1o 2 1n, 1p 3f, 3g 3h, p z, 3i, q l, 1q, o, 1q, 3j, 1p 3k, 1z 3l, 7 1r\",\n        \"10, 3m 3n, 3o, 1s, 3, 1t, 4 0, u d, f, m c, 3p, t 1u, y, c 2 3q 3r e 3s 3t\",\n        \"4 0 3u e 3v 3w, p 3x, 1v, 6, 7 1r, g h, 7 0, 3y 3z, 1v, j z, 4 0, 6 , 1o, 40 19, 41-42\",\n        \"43 e 44, 3 45 46, 2 47 48, 49 4a, 4b 4c, 1b 1c, 4d\",\n        \"1w 4e 4f 4g i 4h 4i 1s 4j 4k 4l 4m i 4n 4o 4p f 2 4q 4r, 2 4s, 1l 1m e 4t 4u 4v, 4w 4x, 1a 1w k 17 5 4y 4z 50 51 3, 1t, t 1u, y, u d, m c, 52, c 2 53 e 54 e n 12 e 55 56, w\",\n        \"57, r 58, 10, 1e 1f, 3, 4 0, 6, 59 5a, 5, 1g, j, 1h 1i,1j 1k\",\n        \"d 2 5b 5c, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 5d 5e, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 5f, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 5g 5h, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 5i 5j, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 5k 5l, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 5m-5n 5o, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 1x 5p, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 5q 5r, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 5s 5t, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 5u 5v, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 5w 5x, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 5y 5z, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 60 61, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 62 63, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 64 65, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 66 67, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"d 2 68 69 6a, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 6b-6c 6d, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 6e 6f, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 6g 6h, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 1x 6i, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 6j 6k, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 6l 6m, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 6n 6o, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 6p 6q 6r, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 6s 6t, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 6u 6v 6w, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 6x 6y, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 6z 70, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 71 72, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 73 74, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 75 76, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 77 78, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\",\n        \"c 2 79 7a, 3 1, 8 1, 9 a, 4 0, 6, 5, b, 7 0\"\n    ]`;\n    const complitions = JSON.parse(decompressText({\n        dictionary: d.split(','),\n        compressedText\n    }));\n    \n    return complitions\n        .map(completion => `${prompt}, ${completion}`)\n        .sort(() => Math.random() - 0.5);\n}\n\ninit();\n\n\n//# sourceURL=webpack://shopify-theme-lab/./src/js/ai-generator.js?");

/***/ }),

/***/ "./src/js/popup.js":
/*!*************************!*\
  !*** ./src/js/popup.js ***!
  \*************************/
/***/ (() => {

eval("document.querySelectorAll('.popup').forEach((p) => {\n  p.$open = () => {\n    p.classList.add('show');\n  };\n  p.$show = (ms = 2500) => {\n    p.$open();\n    setTimeout(() => p.$close(), ms);\n  }\n  p.$close = () => {\n    p.classList.remove('show');\n  };\n})\n\n\n//# sourceURL=webpack://shopify-theme-lab/./src/js/popup.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css/main.scss */ \"./src/css/main.scss\");\n/**\n * imports\n */\n\n// import Cookies from 'js-cookie';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  window.console.log('Hello from main.js 👋.');\n\n  //Close mobile menu \n  let mobileMenu = document.querySelector('#menu-drawer');\n  let menuDrawer = document.querySelector('#Details-menu-drawer-container');\n\n  window.onclick = function(event) {\n    if (event.target != mobileMenu) {\n      menuDrawer.classList.remove('menu-opening');\n    }\n  }\n\n  const dropdowns = document.querySelectorAll('.dropdown-toggle');\n  const dropdownItems = document.querySelectorAll('.dropdown-items [data-val]');\n\n  if (dropdowns?.length > 0) {\n    console.log('dropdowns :>> ', dropdowns);\n    dropdowns.forEach((dr) => {\n      dr.addEventListener('click', (e) => {\n        e.currentTarget.classList.toggle('active');\n        if (window.innerWidth < 768) {\n          document.body.classList.add('no-scroll');\n          document.body.parentElement.classList.add('no-scroll');\n        }\n      });\n    });\n  }\n  if (dropdownItems?.length > 0) {\n    dropdownItems.forEach((di => {\n      di.addEventListener('click', (e) => {\n        const item = e.currentTarget;\n        const parentDropdown = item.closest('[data-target]');\n        const trgButtonSel = parentDropdown ? parentDropdown.getAttribute('data-target') : null;\n\n        parentDropdown.querySelectorAll('[data-val]').forEach((it) => {\n          it.classList.remove('active');\n        });\n        item.classList.add('active');\n\n        document.body.classList.remove('no-scroll');\n        document.body.parentElement.classList.remove('no-scroll');\n\n        if (trgButtonSel) {\n          const trgButton = document.querySelector(trgButtonSel);\n          const trgLabel = trgButton ? trgButton.querySelector('.dropdown-label') : null;\n\n          trgLabel && (trgLabel.innerHTML = item.innerText);\n          trgButton && trgButton.classList.toggle('active', false);\n          const hiddenVal = trgButton.querySelector('input[type=\"hidden\"]');\n          hiddenVal && (hiddenVal.value = item.getAttribute('data-val'));\n        }\n      })\n    }))\n  }\n  document.body.addEventListener('click', (e) => {\n    const trg = e.target;\n\n    if (!(trg.classList.contains('dropdown-items') || trg.closest('.dropdown-items') || \n        trg.classList.contains('dropdown-toggle') || trg.closest('.dropdown-toggle'))) {\n      const activeDropdowns = document.querySelectorAll('.dropdown-toggle.active');\n\n      activeDropdowns.forEach((dropdown) => {\n        dropdown.classList.remove('active');\n      });\n      document.body.classList.remove('no-scroll');\n      document.body.parentElement.classList.remove('no-scroll');\n    }\n  })\n});\n\n\n//# sourceURL=webpack://shopify-theme-lab/./src/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_require__("./src/main.js");
/******/ 	__webpack_require__("./src/js/ai-generator.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/popup.js");
/******/ 	
/******/ })()
;